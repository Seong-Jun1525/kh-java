- 클래스 = [정보/속성/데이터] + 기능
         = 필드 + [생성자] + [메서드]
         
  * 표현법
 [접근제한자] class 클래스명 {
  // 필드부 표현법
  [접근제한자] [예약어] 자료형 변수명[=값];
  * 변수명 규칙
  	- 숫자로 시작할 수 없다
  	- 카멜케이스 표기법을 사용한다
  	- 대소문자 구분된다
  	- 특수문자 $, _만 사용된다
  	- 예약어 사용할 수 없다
  
  // 생성자부 표현법
  [접근제한자] 클래스명 (매개변수정보) {
  	// 초기화 또는 초기작업
  }
  // 생성자명 규칙 : 클래스명과 동일해야한다
  // 생성자의 특징 : 반환형이 표시되지 않고 반환값도 없다
  //					부모클래스의 생성자(super(전달값))는 항상 첫 줄에 작성해야한다
  
  // 메소드부 표현법
  [접근제한자] [예약어] 반환형 메서드명(매개변수정보) {
  	// 반환형이 있을 경우 return 값; 을작성해야함
  	// 반환값이 없을 경우 반환형은 void로 명시한다
  }
 }
- 상속
  * 클래스 또는 인터페이스 간의 상속 관계 적용 시 사용되는 키워드 : extends
  		- 클래스에 인터페이스를 상속(구현)하고자 할 때 : implements
  		- 인터페이스는 추상메서드로 구성되어있다.
  * 부모 타입의 메소드를 자식 클래스에서 재정의하는 것 : 오버라이딩
  		- @Override 어노테이션 사용
  		- 오버로딩
  			=> 같은 클래스 내에 같은 이름의 메서드를 여러 개 정의하는 것
  			=> 메서드 명이 동일해야하고 매개변수 정보가 달라야 한다.
  
- 예외처리 목적 : 비정상적인 프로그램 종료를 막기 위함
  * 예외 처리 방법
    1. 직접 처리
    => try ~ catch 문 사용하기
    try {
    	// 예외가 발생할 수 있는 부분(관찰영역)
    } catch(예외클래스명 변수명) {
    	// 예외 발생 시 처리하는 부분
    } finally {
    	// 예이외 발생 유무 상관없이 반드시 실행하는 부분
    	// io에서는 스트림을 close()해주는 부분
    }
    => 메서드 내에 작성
    
    2. 위임(떠넘기기)
    => throws 예외클래스명
    => 메서드 헤더 부분에 작성
    
  * 예외 발생 시키기
  => throw new 예외클래스생성자()
  => 메서드 내에 작성
  
  * 나만의 예외클래스 만들기
    [조건]
    [1] 예외클래스를 상속
	[2] 매개변수가 1개인 생성자 작성 => 부모클래스 생성자에게 전달(호출)
	
	public class MyException extends Exception {
		public MyException(String msg) {
			super(msg);
		}
	}
    
  
  
- 외부 매체로부터 데이터를 읽어오는 것을 [입력] 이라 하고,
  현재 실행중인 프로그램에서 외부 매체로 데이터가 쓰여지는 것을 [출력] 이라 한다.
  * 바이트 단위 최상위 스트림 : [InputStream](입력용), [OutputStream](출력용)
  * 문자 단위 최상위 스트림 : [Reader](입력용), [Writer](출력용)
  * 기반스트림 : 외부 매체와 직접 연결되는 스트림
  * 보조스트림 : 기반스트림을 보조하는 역할을 하는 스트림
  			- 단독 사용 불가
  			- 객체 단위로 입출력할 때 직렬화 작업이 필요함
  					=> class 입출력시 사용되는 클래스 implements Serializable {}
  
- 컬렉션
 : [자료구조]에 대한 기능을 제공하는 프레임워크

 * 컬렉션 종류 (3가지)
   [1] [List]          : 순서가 있고, 중복 허용
	    [ArrayList]<E>   : 데이터 조회가 빠름(배열 기반)	           ㅁㅁㅁㅁㅁ
	    [LinkedList]<E>  : 데이터 추가/삭제가 빠름 (리스트 기반)  ㅁ->ㅁ->ㅁ
	    
   [2] Set           : 순서가 없고, 중복 허용되지 않음 (null값은 [1]개 추가 가능)
	    HashSet<E>   : 해시 알고리즘 기반으로 데이터 처리 (중복처리)
		                 중복 체크할 때 사용되는 메소드 : 
			 * [hashCode()] 메소드의 반환 값이 동일하고,
			   [equals()] 반환 값이 true인 경우 동일 객체로 판단됨.
			  
   [3] Map  : [key - value] 형식으로 데이터가 저장. 
	     [key]값의 중복 허용되지 않음.
	    HashMap<E> : 키 값 기준으로 해시알고리즘이 적용되어 중복을 체크함.
		               키에 대한 처리 구조가 [Set] 기반.

						List		         Set			          Map
데이터 추가				add					add						put

데이터 삭제				remove				remove					remove

데이터 조회				get			iterator 사용해야함				get
				                   
				                  
				                

데이터 길이조회								size		                 

* Iterator 사용법
  (1) 컬렉션 메소드 [iterator()] 를 사용하여 객체 생성
       
  (2) Iterator 메소드 [hasNext()] : 데이터가 있는 지 체크하는 메소드

  (3) Iterator 메소드 [next()] : 데이터를 꺼내오는 메소드
 ----------------------------------------------------------
 public class Main {
 
	 public static void main(String[] args) {
		 // 다음 코드가 정상 동작될 수 있도록 작성해주세요.
		 MyUtils mu = new MyUtils();
		 mu.add(3, 5);       // 3 + 5 = 8 출력
		 mu.minus(10, 8);    // 10 - 8 = 2 출력
	 }
 }
 
 class MyUtils {
 	 public int add(int n1, int n2) {
	 	return n1 + n2;
	 }
	 
	 public int minus(int n1, int n2) {
	 	return n1 - n2;
	 }
 }
----------------------------------------------------------
// 컬렉션을 사용하여 아래 코드를 작성해주세요.
public class Main {
	/** lotto 메소드 추가
	*   : 1 ~ 45 정수를 중복되지 않게 6개 생성
	*     생성된 6개의 정수를 int[] 로 변환 후 출력
	*/
	
	public static void main(String[] args) {
		lotto();
	}
	
	public static void lotto() {
		int[] lottoArr = new int[6];
		HashSet<Integer> lottoSet = new HashSet<>();

		while(lottoSet.size() < 6) {
			int n = (int)(Math.random() * 45 + 1);
			lottoSet.add(n);
		}

		Iterator<Integer> ir = lottoSet.iterator();
		for(int i = 0; ir.hasNext(); i++) {
			lottoArr[i] = (int) ir.next();
		}
		
		System.out.println(Arrays.toString(lottoArr));
	}
}
----------------------------------------------------------
// 컬렉션을 사용하여 아래 코드를 작성해주세요.
public class Main {
	Map<String, Member> mMap = new HashMap<>();

	public void addMember(Member m) {
		// 회원 정보 중 아이디를 중복되지 않게하여 회원 목록을 관리하려고 한다.
		// 적절한 컬렉션을 선택하여 작성해보자.
		mMap.put(m.getId(), m);
	}
}
-----------------------------------------------------------