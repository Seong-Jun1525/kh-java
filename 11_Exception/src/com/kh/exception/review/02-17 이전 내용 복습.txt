* 자바 *
- 자바 프로그램 실행을 위한 필수 메소드 : main
- 컴파일된 바이트 코드를 실행하는 가상 기계의 이름 : JVM
- 자바에서 메모리 관리를 자동으로 수행하는 기능 : 가비지 컬렉션 (가비지 컬렉터가 해줌)
=> 동적으로 할당 것을 사용하지 않을 때 일정 시간이 지나면 제거해줌

* 변수 * 
- 변수에 값을 최초로 대입하는 것 : 변수 초기화
- 연산을 수행하기 위해서는 연산 대상의 자료형의 종류가 [동일]해야 함
  따라서 형변환이 발생하는데 자동 형변환과 강제 형변환으로 분류됨
  자동 형변환 조건 : 데이터 범위가 작은 범위에서 큰 범위로 변환할 경우
  강제 형변환 방법 : (변환할자료형)값;
  
- 다음 코드의 출력 결과는 ?
  ------------------------
  int a = 5;
  double b = 2.0;
  double result = a / b;
  System.out.println(result);
  ------------------------
  => 2.5
  
* 연산자 *
- 두 변수가 같은지 비교하는 연산자 : ==
- 논리 연산자 && 와 || 의 차이점 :
=> && AND 연산자로 앞의 결과와 뒤의 결과 모두 참이여야 true이고 앞의 결과가 false일 경우 뒤는 실행되지 않는다.
=> || OR 연산자로 앞의 결과, 뒤의 결과 상관없이 하나라도 참이면 결과는 true이고 앞의 결과가 true일 경우 뒤는 실행되지 않는다.

- 다음 코드의 출력 결과는 ?
  ------------------------
  int x = 10;
  int y = 5;
  x += y;
  System.out.println(x); 15
  ------------------------  
  
  
  * 제어문 *
  - if~else문을 이용해 숫자가 양수인지 음수인지 0인지 판별하는 코드 작성
  if(숫자 > 0) {
  	// 실행할 코드
  } else if(숫자 < 0) {
  	// 실행할 코드
  } else {
  	// 실행할 코드
  }
  
  => 삼항연산자로 변경 : System.out.println(a > 0 ? "양수" : (a < 0 ? "음수" : "0이다"));
  
  
  - for문을 사용하여 1부터 10까지의 합을 계산하는 코드 작성
  int sum = 0;
  for(int i = 1; i < 11; i++) {
  	sum += i;
  }  
  
  - while문을 사용하여 사용자로부터 음수를 입력받을 때까지 계속 숫자를 입력받는 코드 작성
  Scanner sc = new Scanner(System.in);
  int x;
  while(true) {
  	System.out.print("숫자 입력 : ");
  	x = sc.nextInt();
  	
  	if(x < 0) break;
  }
  
  
  * 배열 *
  - 배열의 크기를 지정하지 않고 선언 및 초기화하는 방법
  int[] arr = {1, 2, 3};

  - 2차원 배열을 선언하고 초기화하는 방법
  int[][] arr = {
  	{1, 2, 3},
  	{4, 5, 6}
  };
  
  - 다음 코드의 출력 결과는 ?  
    ------------------------
    int[] arr = {1, 2, 3, 4, 5};
    System.out.println(arr[2]);
    ------------------------
    => 3
    
  * 클래스(객체) *
  - 객체는 [클래스]의 [인스턴스]
  - 생성자란 무엇인가? 왜 사용하는가?
  => 생성자란 객체를 사용하기 위한 인스턴스를 만들기 위해 필요한 것.
  => 객체를 생성하기 위한 메서드. 필드에 값을 초기화하기 위해 사용.
  
  - 다음 클래스의 객체를 생성하고 name을 출력하는 코드 작성
  ------------------------
  class Person {
    String name;
    Person (String name) {
      this.name = name;
    }
  }
  
  public class Main {
  
	  public static void main(String[] args) {
	    // 이 곳에 작성해주세요.
	    Person p = new Person("임성준");
	    System.out.println(p.name);
	  }
  
  }
  ------------------------
  
  
  * 객체 배열 *
  - 객체 배열이란 ? 배열의 자료형이 객체인 배열 => 같은 타입의 객체를 여러 개 저장하는 공간
  - 객체 배열을 선언하고 초기화하는 방법 : 클래스명[] 배열명 = new 클래스명[배열 크기];
 											배열명[0] = new 생성자;
 											배열명[1] = new 생성자;
  
  - 다음 코드를 완성하여 Student 객체 배열을 각 학생의 이름 출력
  ------------------------
  class Student {
    private String name;
    // 추가해야할 부분을 작성해주세요.
    
    public Student(String name) {
    	this.name = name;
    }
    
    public void getName() {
    	return this.name;
    }
    
    public String setName(String name) {
    	this.name = name;
    }
  }
  
  public class Main {
    public static void main(String[] args) {
      Student[] students = new Student[3];
      students[0] = new Student("카리나");
      students[1] = new Student("아이유");
      students[2] = new Student("이창섭");
      
      // 학생 이름을 출력할 수 있도록 코드를 작성해주세요.
      for(int i = 0; i < students.length; i++) {
      		System.out.println(students[i].getName());
      }
    }
  }
  ------------------------  
  
  
  * 상속 *
  - 상속이란 ? 부모 타입의 멤버들을 상속을 통해 다른 타입에서 본인의 멤버처럼 사용할 수 있도록 하는 기능
  - 상속을 구현하는 방법 : [접근제한자] class 클래스명 extends 상위클래스명 {}
  
  - 다음 코드에서 Animal 클래스를 상속받은 Dog 클래스 작성
  ------------------------
  class Animal {
    void makeSound() {
      System.out.println("울음 소리!");
    }
  }
  
  // 이 곳에 Dog 클래스를 작성해주세요.
  ------------------------  
  class Dog extends Animal {
  	@Override
  	[접근제한자 : 같은 범위와 넓은 범위까지 가능]public void makeSound() {
  		System.out.println("왈!왈!");
  	}
  }
  
  * 다형성 
  - 다형성이란 ? 부모클래스로부터 파생된 여러 객체를 부모클래스 타입 하나로 다룰 수 있는 기술
  					=> 하나의 타입에서 다양한 기능을 가질 수 있는 성질(기술)
  					=> 오버로딩 : 같은 메서드명으로 여러개 정의
  					=> 오버라이딩 : 부모 타입의 메서드를 자식 클래스에서 재정의 하는 것
  - 인터페이스와 추상 클래스의 차이점
  ==========================================================================
      종류               |          인터페이스       |       추상 클래스
  ==========================================================================
     다중 상속           |    		가능             | 불가능
     메소드 구현 여부     |        미구현            | 구현함
     인스턴스화 가능 여부 |        불가능            | 불가능 
  ==========================================================================
  - 다음 인터페이스를 구현하는 클래스 작성
  ------------------------
  interface Animal {
    void eat();
    void sleep();
  }
  
  // 이 곳에 Animal 인터페이스를 구현하는 클래스를 작성 (Dog 클래스)
  ------------------------
  class Dog implements Animal {
  	@Override
  	public void eat() {
  	 System.out.println("강아기자 먹이를 먹습니다.");
  	}
  	@Override
  	public void sleep() {
  	 System.out.println("강아기자 잠을 잡니다.");
  	}
  }
  
  * 예외 처리 *
  - 예외 처리의 필요성 : 비정상적인 프로그램 종료를 막기 위함
  
  - try ~ catch 문을 사용하여 0으로 나누는 상황에서 예외 처리 코드 작성
  ------------------------
  // 아래 코드에 예외를 추가하세요
  public class Main {
     public static void main(String[] args) {
        int n1 = getRandNum();
        int n2 = getRandNum();
        
        try {
	        // 관찰영역
	        System.out.printf("%d %% %d = %d\n", n1, n2, (n1 / n2));
        } catch(Exception e) { // ArithmeticException e
        	e.printStackTrace();
        	System.out.println(e.getMessage());
        }
        
        System.out.println("프로그램 종료");
     }
     
     public static int getRandNum() {
       return (int)(Math.random() * 10);
     }
  }
  ------------------------