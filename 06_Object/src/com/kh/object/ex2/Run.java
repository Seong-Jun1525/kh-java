package com.kh.object.ex2;
/** 패키지
 * 클래스 간의 공간적 충돌이나 접근 방법의 충돌을 막기위해
 * 저장장치를 구분하여 명확하게 접근할 수 있도록 하는 것
 * 
 * 보통 패키지명은 회사 도메인을 역으로 생성한다
 * 
 */

// Run이라는 이름의 클래스는 객체를 생성하기 위한 목적이 아니라
// main 메서드를 실행하기 위한 용도로 사용됨
public class Run {
	
	/**
	 * 객체지향언어
	 * => 객체를 지향하는 언어로 객체 중심으로 돌아감
	 * 
	 * 객체
	 * - 현실세계에서 독립적으로 존재하는 모든 것을 의미
	 * - 현실에서는 객체들 간의 상호작용으로 돌아감
	 * 
	 * 객체지향프로그램
	 * - 현실세계의 객체들간의 상호작용을 프로그래밍을 통해서 가상세계로 효과적으로 구현된 것
	 * 
	 * => 구현하고자 하는 프로그램 상의 필요한 객체들을 만들기 위해(생성하기 위해)
	 * 		클래스라는 설계도가 필요함 (클래스 -> 객체들의 데이터를 담아낼 그릇같은 존재)
	 * 
	 * * 클래스 설계를 위한 작업 => 추상화 과정
	 * [1] 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해보기
	 * [2] 객체들의 공통적인 속성(데이터), 기능(동작, 행위, ..)들을 추출하기
	 * [3] 추출된 것들을 가지고 내가 구현할 프로그램에서 "실질적인 목적"에 맞춰 불필요한 속성, 기능을 제거하기
	 * [4] 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 이름으로 사용할 것인지 정의하기
	 * 
	 * 학생 관리 프로그램
	 * - 학생객체 (홍길동, 이순신, 김유신, ...)
	 * - 공통적인 속성 및 기능
	 * 		=> 인적사항, 밥을 먹는다, 공부한다, 게임한다, ...
	 * - 인적사항 관리 프로그램 : 이름, 주소, 나이, 이메일, ...
	 *   성적 관리 프로그램 : 이름, 나이, 연락처, 과목별 점수, ...
	 *   건강관리 프로그램 : 이름, 나이, 연락처, 키, 몸무게, 먹는다, 휴식한다, ...
	 * - 이름, 나이, 키에 대해 정의
	 * 		- 이름 : String name;
	 * 		- 나이 : int age;
	 * 		- 키 : double height;
	 * 
	 * * 추상화 작업 후 프로그램에 적용
	 * 	[1] 변수만으로 프로그래밍을 한다면
	 * 		- 변수 : 하나의 자료형으로 하나의 값만 보관함
	 * 			홍길동 객체 -> String name = "홍길동"; int age = 20; double height = 182.3;
	 * 			이순신 객체 -> String name = "이순신"; int age = 21; double height = 192.3;
	 * 			김유신 객체 -> String name = "김유신"; int age = 22; double height = 172.3;
	 * 
	 *  [2] 배열을 사용하여 프로그래밍을 한다면
	 * 		- 배열 : 하나의 자료형으로 여러 개의 데이터 값을 보관함
	 * 			이름 : String[] name = {"홍길동", "이순신"};
	 * 			나이 : int[] age = {20, 21};
	 * 
	 *  [3] 구조체 : 여러 개의 자료형으로 여러 개의 값들을 보관함
	 *  	Struct human {
	 *  		String name;
	 *  		int age;
	 *  		double height;
	 *  	}
	 *  문자열 값도 보관하고, 정수형 값도 보관하고, 동시에 실수형 값도 함께 보관하는 자료형 직접 만든 것
	 *  => 자바에서는 구조체 개념을 좀 더 확장하여 클래스라는 개념을 만듬
	 *  
	 *  	class Student {
	 *  		String name;
	 *  		int age;
	 *  		double height;
	 *  
	 *  		// 기능
	 *  	}
	 */

	public static void main(String[] args) {
		Student student1 = new Student("임성준", 26, 182.3);
		Student student2;
		student2 = new Student();
		
		// 인스턴스 변수에 접근 : 참조변수명.인스턴스변수명
		student2.setUserName("홍길동");
		student2.setUserAge(30);
		student2.setUserHeight(172.3);
		
		student1.print();
		student2.print();
	}

}
