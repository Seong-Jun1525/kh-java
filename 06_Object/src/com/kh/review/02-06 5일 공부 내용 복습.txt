* 변수는 크게 참조변수 와 일반변수로 구분할 수 있다.
  일반변수 는 기본자료형(int, char, double, ...)으로 선언된 변수이고, 데이터 값을 저장한다.
  참조변수 는 참조자료형(int[], double[], Product, ...)로 선언된 변수이고, 주소값을 저장한다.
  
* 객체는 프로그램에서 대상이 되는 정보를 저장하기 위한 목적으로 사용된다.
  이러한 객체를 저장할 틀로서 class를 정의한다.
  객체 는 데이터를 저장하는 변수와 기능을 수행하는 메서드로 구성한다.
  이렇게 틀을 정의하고 사용하기 위해 인스턴스를 생성한다.
  인스턴스 생성 방법 : new 생성자;
  
  - 생성자는 객체를 생성하기 위한 목적으로 사용되는 특별한 메소드이다.
    생성자의 특징
    [1] 클래스명과 동일
    [2] 여러개일수있지만 정의하지 않으면 기본생성자로 생성됨. 반환값이 없으며 반환형도 표시하지 않음.
    
  - 변수를 정의할 때 클래스 내에서만 접근 가능하도록 하기 위해 private 제한 지시어(접근제한자)를 사용한다. 
    이렇게 외부에서 데이터에 직접적인 접근을 막는 것을 정보은닉이라 한다. 
    접근을 제한한 데이터를 사용하기 위해 public 제한 지시어(접근제한자)를 사용한 메소드를 정의한다.
    이처럼, 데이터 또는 중요한 로직을 하나로 묶어서 관리하는 것을 캡슐화 라고 한다.
  
* 다음은 메소드 오버로딩을 적용하고자한 코드이다. 
	오버로딩이 적용되는 것은 무엇일까?

	기준 	public void method1(int i){}
	=========================
	1 public void method1(String str){}
		=> 둘만 있을 때 : o 메서드명 동일/매개변수정보 불일치
		=> 전체가 있을 때 : o 메서드명 동일/매개변수정보 일치
		
	2 public void method1(int i, String str){}
		=> 둘만 있을 때 : o 메서드명 동일/매개변수정보 불일치 
		=> 전체가 있을 때 : x 메서드명 동일/매개변수정보 불일치

	3 public void method1(int num){}
		=> 둘만 있을 때 : x 메서드명 동일/매개변수정보 일치 
		=> 전체가 있을 때 : x 메서드명 동일/매개변수정보 일치
		
	4 public char method1(int point){}
		=> 둘만 있을 때 : x 메서드명 동일/매개변수정보 일치 
		=> 전체가 있을 때 : x 메서드명 동일/매개변수정보 일치

	5 public void method1(int i, int k){}
		=> 둘만 있을 때 : o 메서드명 동일/매개변수정보 불일치 
		=> 전체가 있을 때 : o 메서드명 동일/매개변수정보 불일치

	6 public void method1(int num, String string){}
		=> 둘만 있을 때 : o 메서드명 동일/매개변수정보 불일치 
		=> 전체가 있을 때 : x 메서드명 동일/매개변수정보 일치

	7 public void method1(String str, int i){}
		=> 둘만 있을 때 : o 메서드명 동일/매개변수정보 불일치 
		=> 전체가 있을 때 : o 메서드명 동일/매개변수정보 일치 -> 순서가 달라서 가능

	---------------------------------------------