* 객체 ? 현실세계에 독립적으로 존재하는 모든 것들을 의미
           현실세계에서는 객체들간의 상호작용으로 돌아감
          
* 객체지향 프로그래밍 ? 현실세계의 객체들간의 상호작용을 프로그래밍을 통해 가상세계로 구현하는 과정
    - 구현하고자 하는 프로그램 상의 필요한 객체를 만들기 위해서 (생성하기 위해서)
      [클래스]라는 틀을 먼저 만들어야 함.
      
* [클래스] ? 각 객체들의 속성(정보)들을 담아낼 그릇과 같은 존재

  - 구조
  
    [접근제한자 class 클래스명] {
        // 필드부
        
        // 생성자부
        
        // 메소드부
    }
    
   - 자바에서는 객체를 사용하기 위해 [new] 키워드를 사용하여 [힙 메모리] 영역에 생성을 먼저 해야함 (공간 할당)

   - [캡슐화] : 데이터 또는 중요한 로직을 하나로 묶어 관리하는 기법
         * 정보은닉 : [private] 접근 제한자를 사용하여 데이터에 직접 접근을 제한함
         * [getter / setter] 메소드 : 외부에서 직접 접근이 제한된 데이터에 간접적으로 접근할 수 있도록 하는 방법
               + [setter] 메소드 : 해당 필드에 대입하고자 하는 값을 전달받아 해당 필드에 대입시켜주는 메소드
               + [getter] 메소드 : 해당 필드에 담긴 값을 반환해주는 메소드
               
   - 생성자
	   + 기본 생성자 : 단지 [객체 생성]만을 목적으로 할 때 사용
	                  [매개변수] 없는 생성자
	                  기본 생성자는 생략했을 경우 컴파일러가 자동으로 만들어주기 때문에 객체 생성 가능            
     + 매개변수 생성자 : 객체 생성과 동시에 전달값들을 매개변수로 받아서 해당 각 필드에 [초기화]할 목적으로 사용
     
     # 중복되는 동일한 내용의 다른 생성자가 존재하는 경우 [this([전달값])]를 활용 가능
       => 같은 클래스 내에 생성자에서 또다른 생성자를 호출하고자 할 때 사용
          ( 주의사항! 반드시 첫줄에 작성해야 함 )
     # 생성자 작성 시 주의사항
       1) 반드시 생성자명은 [클래스명]과 동일해야함 (대/소문자 구분됨!)
       2) [반환형]이 존재하지 않음 ([반환형] 작성 시 [메서드]로 인식함)
       3) 매개변수 생성자를 명시적으로 작성하게 되면 컴파일러가 [기본 생성자]를 자동으로 만들어주지 않음
          (되도록, [기본생성자]를 항상 작성하는 습관을 가지자!)
          
    - 메소드 : 하나의 [기능]을 처리하기 위한 용도
      + 표현법
      
      // 1) 매개변수가 없고 반환값도 없는 메소드
      접근제한자 void 메서드명() {}
      
      // 2) 매개변수가 없고 반환값은 있는 메소드
      접근제한자 반환형 메서드명() {
      	return 반환값;
      }
      
      // 3) 매개변수가 있고 반환값은 없는 메소드
      접근제한자 void 메서드명(자료형 변수명) {}
      
      // 4) 매개변수가 있고 반환값도 있는 메소드
      접근제한자 반환형 메서드명(자료형 변수명) {
      	return 반환값;
      }
      
      + 오버로딩 : 한 클래스 내에 [같은] 메소드명으로 여러 개를 정의할 수 있는 방법
        # 조건
        1) 메서드명이 같아야 한다
        2) 매개변수 정보가 달라야 한다
   // ----------------------------------------
   // * 다음 클래스 다이어그램을 보고 클래스를 정의해보자
   ---------------------------
   | com.test.obj.Fruit       |
   ---------------------------
   | - name:String  // 이름  |
   | - price:int    // 가격     |
   | - origin:String // 원산지|
   | - stock:int    // 재고    |
   ---------------------------
   | + Fruit()                   |
   | + Fruit(name:String     |
   |        ,price:int)          |
   | + Fruit(name:String     |
   |        ,price:int           |
   |        ,origin:String      |
   |        ,stock:int          |
   --------------------------
   | +toString():String      |
   | +getter/setter          |
   | +checkForSale():boolean|
   --------------------------
   
   package com.test.obj;
   
   public class Fruit {
   		private String name;
   		private int price;
   		private String origin;
   		private int stock;
   		
   		public Fruit() {}
   		public Fruit(String name, int price) {
   			this.name = name;
   			this.price = price;
   		}
   		public Fruit(String name, int price, String origin, int stock) {
   			this(name, price);
   			// this.name = name;
   			// this.price = price;
   			this.origin = origin;
   			this.stock = stock;
   		}
   		
   		public boolean checkForSale() {
   			return stock < 1 ? false : true;
   			// return !(stock < 1);
   		}
   		
   		public void setName(String name) {
   			this.name = name;
   		}
   		
   		public String getName() {
			return this.name;   		
   		}
   		
   		public void setPrice(int price) {
   			this.price = price;
   		}
   		
   		public String getPrice() {
			return this.price;   		
   		}
   		
   		public void setOrigin(String origin) {
   			this.origin = origin;
   		}
   		
   		public String getOrigin() {
			return this.origin;   		
   		}
   		
   		public void setStock(int stock) {
   			this.stock = stock;
   		}
   		
   		public String getStock() {
			return this.stock;   		
   		}
   		
   		public String toString() {
   			return "이름 : " + this.name + "\n" + "가격 : " + this.price + "\n" + "원산지 : " + this.origin + "\n" + "재고 : " + this.stock + "\n";
   		}
   }
   
  // * checkForSale 메소드 : 재고 개수가 1개 미만인 경우 false 반환