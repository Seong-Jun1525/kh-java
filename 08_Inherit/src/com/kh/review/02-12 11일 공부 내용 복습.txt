* 상속에 대한 설명으로 옳을 것을 모두 고르면?
(1) 자바에서는 클래스 간에 다중 상속을 지원한다.
(2) 부모 클래스의 private 변수는 자식 클래스에서 직접 접근 가능하다.
(3) super 키워드는 부모 클래스의 생성자 또는 메소드를 호출할 때 사용된다.
(4) 부모 클래스의 메소드를 자식클래스에서 재정의하는 것을 오버로딩이라 한다.
(5) 부모 클래스의 생성자가 명시적으로 호출되지 않으면 기본 생성자가 자동으로 호출된다.

// => 위 항목 중 잘못된 부분을 바르게 수정해보자.
(1) => 자바는 단일 상속을 지원한다
(2) => private으로 선언된 변수는 하위클래스에서 직접접근이 불가하다
(3) => 정답
(4) => 부모 클래스의 메서드를 자식 클래스에서 재정의 하는 것은 오버라이딩이다. 오버로딩은 메서드 명은 같지만 매개변수가 정보가 다른 메서드를 만들때 쓰는 표현
(5) => 정답
// -------------------------------------------------------------------------
// 아래 정의된 클래스에서 오버로딩이 적용된 부분과 오버라이딩이 적용된 부분을 찾아보자.
class Coffee {
    void brew() { // => 오버로딩 적용. 하나의 클래스내에서 메서드 명이 brew로 같지만 매개변수 정보가 다름
        System.out.println("커피를 준비합니다.");
    }

    void brew(String type) { // => 오버로딩 적용. 하나의 클래스내에서 메서드 명이 brew로 같지만 매개변수 정보가 다름
        System.out.println(type + " 커피를 준비합니다.");
    }

    void brew(int count) { // => 오버로딩 적용. 하나의 클래스내에서 메서드 명이 brew로 같지만 매개변수 정보가 다름
        System.out.println(count + "잔의 커피를 준비합니다.");
    }
}

class Latte extends Coffee {
    @Override
    void brew() { // => 오버라이딩 적용. 부모 클래스의 메서드를 자식 클래스에서 재정의함
        System.out.println("라떼를 준비합니다.");
    }

    @Override // 애노테이션을 생략할 수 있음 하지만 오타가 있을 경우 컴파일 에러가 발생함
    void brew(String type) { // => 오버라이딩 적용. 부모 클래스의 메서드를 자식 클래스에서 재정의함
        System.out.println(type + " 라떼를 준비합니다.");
    }

    void brew(String type, boolean isIced) { // => 오버로딩 적용. 하나의 클래스내에서 메서드 명이 같지만 매개변수 정보가 다름
        if (isIced) {
            System.out.println(type + " 아이스 라떼를 준비합니다.");
        } else {
            System.out.println(type + " 따뜻한 라떼를 준비합니다.");
        }
    }
}


public class Main {
    public static void main(String[] args) {
        Coffee ame = new Coffee();
        Latte caramel = new Latte();

        // 다음 메소드들의 실행 결과는?
        ame.brew();                       // 커피를 준비합니다.
        ame.brew("아메리카노");       // 아메리카노 커피를 준비합니다.
        ame.brew(2);                     // 2잔의 커피를 준비합니다.

        caramel.brew();                   // 라떼를 준비합니다.
        caramel.brew("카라멜", true);  // 카라멜 아이스 라떼를 준비합니다.
        caramel.brew("카라멜", false);  // 카라멜 따뜻한 라떼를 준비합니다.
    }
}

