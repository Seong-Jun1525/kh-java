* 상속 *
클래스가 가지고 있는 [멤버]를 다른 클래스에서 직접 만들지 않고
상속받음으로써 자신의 [멤버] 처럼 사용할 수 있는 기능
=> 멤버는 필드와 메서드(변수, 메서드)

- 특징
  1) 모든 클래스는 [Object] 클래스의 후손이다
  2) 부모클래스의 [생성자], [초기화블럭]은 상속되지 않는다				=> 초기화블럭!!! 기억하기★★★
  3) 부모의 [private] 멤버는 상속은 되지만 직접 접근 불가하다
  4) 자바에서는 [단일 상속]만 지원한다
  5) 자식 클래스에서 부모 클래스의 생성자를 호출할 때 [super()]를 사용한다
                                멤버(변수/메소드)에 접근할 때 [super.]를 사용한다
  
- 표현식 ( 아래와 같이 클래스 표현 시 상속 관계를 적용한다면 ? )

		[접근제한자] class 클래스명 extends 부모클래스 {
		
		}
	
-----------------------------------------------
/*
@ 회원이라는 객체를 표현해 보자. ( # 클래스가 총 4개 생성될 것 )
회원에는 등급이 있는데, 
Green, Gold, VIP로 구분되며 각각 할인율이 0.01, 0.03, 0.07이 된다고 가정하고
이를 클래스화 해보자. ( 회원 정보에 저장되는 데이터는 이름, 연락처, 주소이다. )
*/
-----------------------------------------------
public class Member {
	private String name;
	private String phone;
	private String address;

	public Member() {}
	public Member(String name, String phone, String address) {
		this.name = name;
		this.phone = phone;
		this.address = address;
	}
	
	// method & getter & settter
}

public class Green extends Member {
	private String grade = "Green";
	private final double discountRate = 0.01;

	public Green() {}
	// final로 했기때문에 discountRate는 매개변수 X
	// final로 하지 않을 경우 매개변수로 필요!
	public Green(String name, String phone, String address, String grade) {
		super(name, phone, address);

		// 만약 부모 클래스에 생성자가 없을 경우 setter 메서드를 통해서 변경해야함
	}

	// method & getter & settter
}

public class Gold extends Member {
	private String grade = "Gold";
	private final double discountRate = 0.03;

	public Gold() {}
	// final로 했기때문에 discountRate는 매개변수 x. final로 하지 않을 경우 매개변수로 필요!
	public Gold(String name, String phone, String address, String grade) {
		super(name, phone, address);

		// 만약 부모 클래스에 생성자가 없을 경우 setter 메서드를 통해서 변경해야함
	}

	// method & getter & settter
}

public class VIP extends Member {
	private String grade = "VIP";
	private final double discountRate = 0.07;

	public VIP() {}
	// final로 했기때문에 discountRate는 매개변수 x. final로 하지 않을 경우 매개변수로 필요!
	public VIP(String name, String phone, String address, String grade) {
		super(name, phone, address);

		// 만약 부모 클래스에 생성자가 없을 경우 setter 메서드를 통해서 변경해야함
	}

	// method & getter & settter
}